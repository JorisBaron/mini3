<?php


namespace Mini\Entity;

use Mini\Repository\RoleRepository;

/**
 * Class UserEntity
 * @package Mini\Entity
 * @property int $id
 * @property string $username
 * @property string $password
 * @property array $roles
 */
class UserEntity extends BaseEntity {

	const ROLE_GUEST = 0;
	const ROLE_USER  = 1;
	const ROLE_ADMIN = 2;

	protected $data = [
		'id'   => null,
		'username' => null,
		'password' => null,
		'roles'    => []
	];
	
	/*public function &__get($name) {
		$val = null;
		if(isset($this->data[$name])){
			return $this->data[$name];
		}
		return $val;
	}*/

	public function __set($name, $value) {
		if($name == 'roles'){
			$value = array_filter($value, function ($v){
				return $v!== self::ROLE_GUEST;
			});
		}
		parent::__set($name, $value); // TODO: Change the autogenerated stub
	}

	public function __construct($data = [], $strict = false) {
		parent::__construct($data, $strict);
		//$this->roles = [(new RoleRepository())->getById(0)];
	}

	public function isGuest() {
		return $this->roles===[];
	}
	public function isAuth() {
		return !$this->isGuest();
	}
	public function isUser() {
		return in_array(self::ROLE_USER, $this->roles);
	}
	public function isAdmin() {
		return in_array(self::ROLE_ADMIN, $this->roles);
	}

	public function verifyPassword($password){
		return password_verify($password, $this->password);
	}

	public function addRole(int $role){
		if($role !== self::ROLE_GUEST && !in_array($role, $this->roles)){
			$this->data['roles'][] = $role;
		}
	}

	public function removeRole(int $role){
		if($role !== self::ROLE_GUEST && in_array($role, $this->roles)){
			unset($this->data['roles'][array_search($role,$this->roles)]);
		}
	}
}